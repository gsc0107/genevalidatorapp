#!/usr/bin/env ruby
require 'readline'
require 'English'


ENV['RACK_ENV'] ||= 'production'

# display name for tools like `ps`
$PROGRAM_NAME = 'genevalidatorapp'


opt = {}

global = OptionParser.new do |opts|
  opts.banner = <<BANNER
SUMMARY:
  Launch GeneValidator as a web application

USAGE:
  $ genevalidator app [options]

Examples:
  # Launch GeneValidatorApp with the given config file
  $ genevalidator app --config ~/.genevalidatorapp.conf

  # Launch GeneValidatorApp with 8 threads at port 8888
  $ genevalidator app --num_threads 8 --port 8888

  # Create a config file with the other arguments
  $ genevalidator app -s -d ~/database_dir

BANNER

  opts.separator 'MANDATORY ARGUMENTS'
  opts.separator ' '

  opts.on('-d', '--database_dir [PATH]',
          'Path to the directory containing BLAST database') do |path|
    opt[:database_dir] = path
  end

  opts.separator ' '
  opts.separator 'OPTIONAL ARGUMENTS'
  opts.separator ' '

  opts.on('-c', '--config_file [PATH]',
          'Path to the directory containing BLAST database') do |path|
    opt[:config_file] = path
  end

  opts.on('-g', '--gv_public_dir [PATH]',
          'The public directory that is served to the web application') do |path|
    opt[:gv_public_dir] = path
  end

  opts.on('-b', '--bin [PATH]', Array,
          'Path to BLAST and MAFFT bin folders (is added to $PATH variable)',
          'To be provided as follows:',
          'e.g.   genevalidator -b /blast/bin/path/ -b /mafft/bin/path/') do |bin|
    (opt[:bin] ||= []).concat(bin)
  end

  opts.on('-f', '--default_database_path  [PATH]',
          'Path to the default BLAST database') do |path|
    opt[:default_database_path] = path
  end

  opts.on('-H', '--host [HOST]',
          'Host to run GeneValidatorApp on') do |host|
    opt[:host] = host
  end

  opts.on('-p', '--port [PORT]',
          'Port to run GeneValidatorApp on') do |port|
    opt[:port] = port
  end

  opts.on('-s', '--set',
          'Set configuration value in default or given config file') do
    opt[:set] = true
  end

  opts.on('-l', '--list_databases',
          'List found BLAST databases') do
    opt[:list_databases] = true
  end

  opt[:num_threads] = 1
  opts.on('-n', '--num_threads [THREADS]',
          'Number of threads to use to running the app') do |num_threads|
    opt[:num_threads] = num_threads
  end

  opts.on('-D', '--devel',
          'Start GeneValidatorApp in development mode') do
    opt[:devel] = true
  end

  opts.on('-h', '--help', 'Show this screen.') do
    warn subcommands['app']
    exit
  end
end

begin
  global.order!
rescue OptionParser::ParseError
  $stderr.print 'Error: ' + $ERROR_INFO.to_s + "\n"
  exit 1
end

ENV['RACK_ENV'] = 'development' if opt[:devel]

# Exit gracefully on SIGINT.
stty = `stty -g`.chomp
trap('INT') do
  puts ''
  puts 'Aborted.'
  system('stty', stty)
  exit
end

require 'genevalidatorapp'

begin
  GeneValidatorApp.init opt

  # The aim of following error recovery scenarios is to guide user to a
  # working GeneValidatorApp installation. We expect to land following
  # error scenarios either when creating a new GeneValidatorApp (first
  # time or later), or updating config values using -s CLI option.
rescue GeneValidatorApp::CONFIG_FILE_ERROR => e
  puts e
  exit!
rescue GeneValidatorApp::NUM_THREADS_INCORRECT => e
  puts e

  if opt[:num_threads].nil?
    puts 'You can set the correct value by running:'
    puts
    puts '  genevalidatorapp -s -n <value>'
    puts
  end

  exit!
rescue GeneValidatorApp::BIN_DIR_NOT_FOUND => e
  puts e

  if opt[:bin].nil?
    puts 'You can set the correct value by running:'
    puts
    puts '  genevalidatorapp -s -b <value>'
    puts
  end

  exit!
rescue GeneValidatorApp::DATABASE_DIR_NOT_FOUND => e
  puts e

  if opt[:database_dir].nil?
    puts 'You can set the correct value by running:'
    puts
    puts '  genevalidatorapp -s -d <value>'
    puts
  end

  exit!
rescue GeneValidatorApp::BLAST_DATABASE_ERROR => e
  puts e
  exit!
rescue => e
  # This will catch any unhandled error and some very special errors.
  # Ideally we will never hit this block. If we do, there's a bug in
  # GeneValidatorApp or something really weird going on. If we hit this
  # error block we show the stacktrace to the user requesting them to
  # post the same to our Google Group.
  puts <<MSG
Something went wonky

Looks like you have encountered a bug in GeneValidatorApp. Please could you
report this incident here -
https://github.com/wurmlab/genevalidator/issues

Error:
#{e.backtrace.unshift(e.message).join("\n")}
MSG
  exit!
end

if opt[:list_databases]
  puts GeneValidatorApp::Database.all
  exit
end

if opt[:set]
  GeneValidatorApp.config.write_config_file
  exit
end

GeneValidatorApp.run
